{"ast":null,"code":"var _jsxFileName = \"/Users/nirajpatel/Desktop/Phase-3-Frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport NavBar from './components/Home/NavBar';\nimport NewUserForm from './components/User/NewUserForm';\nimport Login from './components/Login/Login';\nimport PopTrack from './components/Popular/PopTrack';\nimport ChristmasTrack from './components/Christmas/ChristmasTrack';\nimport Playlist from './components/Playlist/Playlist';\nimport UserProfile from './components/User/UserProfile';\nimport Home from './components/Home/Home';\nimport Loading from './components/Login/Loading';\nimport Dev from './components/Devs/Dev';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this._isMounted = false;\n    this.state = {\n      topHits: [],\n      userList: [],\n      random: [],\n      isLoading: true,\n      user: {},\n      login: false,\n      playlist: [],\n      searchedSongs: [],\n      loading: false,\n      tracks: [],\n      playlistTracks: []\n    };\n\n    this.getTracks = () => {\n      fetch('http://localhost:3001/api/v1/tracks', {\n        headers: {\n          Authorization: localStorage.getItem(\"token\")\n        }\n      }).then(res => res.json()).then(data => {\n        this.setState({\n          tracks: data\n        });\n      });\n    };\n\n    this.loginSubmitHandler = userInfo => {\n      fetch('http://localhost:3001/api/v1/login', {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Action: \"application/json\"\n        },\n        body: JSON.stringify({\n          username: userInfo.username,\n          password: userInfo.password\n        })\n      }).then(res => res.json()).then(data => {\n        localStorage.setItem(\"token\", data.jwt);\n        this.setState({\n          user: data.user,\n          login: true\n        });\n        this.props.history.push(\"/home\");\n        this.getChristmas();\n        this.getTopHits();\n        this.getPlaylist(data.user.id);\n        this.getTracks();\n        this.getPlaylistTracks();\n      });\n    };\n\n    this.newUserSubmitHandler = (event, userInfo) => {\n      event.preventDefault();\n      let token = localStorage.getItem(\"token\");\n      fetch('http://localhost:3001/api/v1/users', {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify({\n          name: userInfo.name,\n          username: userInfo.username,\n          password: userInfo.password\n        })\n      }).then(res => res.json()).then(data => {\n        localStorage.setItem(\"token\", data.jwt);\n        this.setState({\n          user: data.user,\n          login: true\n        });\n        this.props.history.push(\"/home\");\n        this.getChristmas();\n        this.getTopHits();\n        this.getPlaylist(data.user.id);\n        this.getTracks();\n        this.getPlaylistTracks();\n      });\n    };\n\n    this.logout = () => {\n      localStorage.removeItem(\"token\");\n      this.setState({\n        user: {},\n        login: false\n      });\n      this.props.history.push(\"/home\");\n    };\n\n    this.submitPlaylistHandler = (e, playlistId, track, spotifyId) => {\n      e.preventDefault();\n      fetch(`http://localhost:3001/api/v1/playlist_tracks`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: localStorage.getItem(\"token\")\n        },\n        body: JSON.stringify({\n          playlist_id: playlistId,\n          track_id: track.id,\n          spotify_id: spotifyId\n        })\n      }).then(res => res.json()).then(data => {\n        let fullPlaylist = [...this.state.playlistTracks, data];\n        let newTrack = {\n          id: data.track_id,\n          name: track.name,\n          artists: track.artists,\n          image: track.image,\n          duration: track.duration,\n          popularity: track.popularity,\n          preview: track.preview,\n          spotify_id: track.spotify_id\n        };\n        this.setState({\n          playlistTracks: fullPlaylist,\n          tracks: [...this.state.tracks, newTrack]\n        });\n      }).then(alert(`${track.name} added!`));\n    };\n\n    this.getPlaylist = id => {\n      fetch(`http://localhost:3001/api/v1/users/${id}/playlists`, {\n        headers: {\n          Authorization: localStorage.getItem(\"token\")\n        }\n      }).then(res => res.json()).then(data => {\n        let newPl = [...data].filter(pl => pl.user_id === id);\n        this.setState({\n          playlist: newPl\n        });\n      });\n    };\n\n    this.getPlaylistTracks = () => {\n      fetch(`http://localhost:3001/api/v1/playlist_tracks`, {\n        headers: {\n          Authorization: localStorage.getItem(\"token\")\n        }\n      }).then(res => res.json()).then(data => {\n        this.setState({\n          playlistTracks: data\n        });\n      });\n    };\n\n    this.editSubmitHandler = (e, userInfo) => {\n      e.preventDefault();\n      let id = this.state.user.id;\n      console.log(id);\n      fetch(`http://localhost:3001/api/v1/users/${id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: localStorage.getItem(\"token\")\n        },\n        body: JSON.stringify({\n          name: userInfo.name,\n          username: userInfo.username,\n          password: this.state.user.password\n        })\n      });\n    };\n\n    this.deleteUser = () => {\n      let id = this.state.user.id;\n      fetch(`http://localhost:3001/api/v1/users/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          Authorization: localStorage.getItem(\"token\")\n        }\n      }).then(this.logout());\n    };\n\n    this.fetchSearchedSongs = query => {\n      this.setState({\n        loading: true\n      });\n      fetch(`http://localhost:3001/api/v1/tracks/search?q=${query}`, {\n        method: \"GET\",\n        headers: {\n          Authorization: localStorage.getItem(\"token\")\n        }\n      }).then(r => r.json()).then(data => {\n        this.setState({\n          searchedSongs: data,\n          loading: false\n        });\n      });\n    };\n\n    this.createNewPlaylist = (e, playlist) => {\n      e.preventDefault(); //console.log(playlist)\n\n      fetch(`http://localhost:3001/api/v1/users/${playlist.userId}/playlists`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: localStorage.getItem(\"token\")\n        },\n        body: JSON.stringify({\n          name: playlist.name,\n          user_id: playlist.userId\n        })\n      }).then(res => res.json()).then(data => {\n        let playlist = [...this.state.playlist, data];\n        this.setState({\n          playlist\n        });\n      }).then(alert(`${playlist.name} created!`));\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    if (this._isMounted) {\n      this.setState({\n        isLoading: false\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  getTopHits() {\n    //change address depending on port\n    fetch('http://localhost:3001/api/v1/tracks/top_100', {\n      headers: {\n        Authorization: localStorage.getItem(\"token\")\n      }\n    }).then(res => res.json()).then(data => {\n      if (this._isMounted) {\n        this.setState({\n          isLoading: false,\n          topHits: data\n        });\n      }\n    });\n  }\n\n  getChristmas() {\n    //change address depending on port\n    fetch('http://localhost:3001/api/v1/tracks/random', {\n      headers: {\n        Authorization: localStorage.getItem(\"token\")\n      }\n    }).then(res => res.json()).then(data => {\n      if (this._isMounted) {\n        this.setState({\n          isLoading: false,\n          random: data\n        });\n      }\n    });\n  }\n\n  getUserList() {\n    fetch('http://localhost:3001/api/v1/users').then(res => res.json()).then(data => {\n      this.setState({\n        userList: data\n      });\n    });\n  }\n\n  // addToPlaylist = (track) => {\n  //   let newPlaylist = [...this.state.playlist, track]\n  //   this.setState({\n  //     playlist: newPlaylist\n  //   })\n  //   alert(`${track.name} added!`)\n  // }\n  //\n  // removeSong = (trackObj) => {\n  //   let newPlaylist = [...this.state.playlist].filter(track => track !== trackObj)\n  //   this.setState({playlist: newPlaylist})\n  // }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        login: this.state.login,\n        logout: this.logout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/playlist\",\n          render: () => /*#__PURE__*/_jsxDEV(Playlist, {\n            userInfo: this.state.user,\n            createNewPlaylist: this.createNewPlaylist,\n            playlist: this.state.playlist,\n            removeSong: this.removeSong,\n            tracks: this.state.tracks,\n            playlistTracks: this.state.playlistTracks\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/popular\",\n          render: () => this.state.topHits.length === 0 ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 13\n          }, this) : /*#__PURE__*/_jsxDEV(PopTrack, {\n            topHits: this.state.topHits,\n            addToPlaylist: this.submitPlaylistHandler,\n            playlist: this.state.playlist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/christmas\",\n          render: () => this.state.random.length === 0 ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(ChristmasTrack, {\n            random: this.state.random,\n            addToPlaylist: this.submitPlaylistHandler,\n            playlist: this.state.playlist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/profile\",\n          render: () => /*#__PURE__*/_jsxDEV(UserProfile, {\n            userInfo: this.state.user,\n            editSubmitHandler: this.editSubmitHandler,\n            deleteUser: this.deleteUser\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/signup\",\n          render: () => /*#__PURE__*/_jsxDEV(NewUserForm, {\n            newUserSubmitHandler: this.newUserSubmitHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/login\",\n          render: () => /*#__PURE__*/_jsxDEV(Login, {\n            loginSubmitHandler: this.loginSubmitHandler,\n            userInfo: this.state.user\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/home\",\n          render: () => /*#__PURE__*/_jsxDEV(Home, {\n            fetchSearchedSongs: this.fetchSearchedSongs,\n            searchedSongs: this.state.searchedSongs,\n            login: this.state.login,\n            loading: this.state.loading,\n            addToPlaylist: this.submitPlaylistHandler,\n            playlist: this.state.playlist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          component: Home\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/devs\",\n          component: Dev\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/nirajpatel/Desktop/Phase-3-Frontend/src/App.js"],"names":["React","Component","Route","Switch","withRouter","NavBar","NewUserForm","Login","PopTrack","ChristmasTrack","Playlist","UserProfile","Home","Loading","Dev","App","_isMounted","state","topHits","userList","random","isLoading","user","login","playlist","searchedSongs","loading","tracks","playlistTracks","getTracks","fetch","headers","Authorization","localStorage","getItem","then","res","json","data","setState","loginSubmitHandler","userInfo","method","Action","body","JSON","stringify","username","password","setItem","jwt","props","history","push","getChristmas","getTopHits","getPlaylist","id","getPlaylistTracks","newUserSubmitHandler","event","preventDefault","token","Accept","name","logout","removeItem","submitPlaylistHandler","e","playlistId","track","spotifyId","playlist_id","track_id","spotify_id","fullPlaylist","newTrack","artists","image","duration","popularity","preview","alert","newPl","filter","pl","user_id","editSubmitHandler","console","log","deleteUser","fetchSearchedSongs","query","r","createNewPlaylist","userId","componentDidMount","componentWillUnmount","getUserList","render","removeSong","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport {Route, Switch, withRouter} from 'react-router-dom';\nimport NavBar from './components/Home/NavBar'\nimport NewUserForm from './components/User/NewUserForm';\nimport Login from './components/Login/Login';\nimport PopTrack from './components/Popular/PopTrack';\nimport ChristmasTrack from './components/Christmas/ChristmasTrack';\nimport Playlist from './components/Playlist/Playlist';\nimport UserProfile from './components/User/UserProfile';\nimport Home from './components/Home/Home';\nimport Loading from './components/Login/Loading'\nimport Dev from './components/Devs/Dev'\n\n\n\nclass App extends Component {\n  _isMounted = false;\n\n  state={\n    topHits: [],\n    userList: [],\n    random: [],\n    isLoading: true,\n    user: {},\n    login: false,\n    playlist: [],\n    searchedSongs: [],\n    loading: false,\n    tracks: [],\n    playlistTracks: [],\n  }\n\n  componentDidMount(){\n    this._isMounted = true;\n    if (this._isMounted) {\n      this.setState({isLoading: false})\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  getTopHits(){\n    //change address depending on port\n    fetch('http://localhost:3001/api/v1/tracks/top_100', {\n      headers: {\n        Authorization: localStorage.getItem(\"token\")\n      }\n    }).then(res=>res.json())\n      .then(data => {\n        if (this._isMounted) {\n          this.setState({\n            isLoading: false,\n            topHits: data\n          })\n        }\n      })\n  }\n\n  getChristmas(){\n    //change address depending on port\n    fetch('http://localhost:3001/api/v1/tracks/random', {\n      headers: {\n        Authorization: localStorage.getItem(\"token\")}\n      })\n      .then(res=>res.json())\n      .then(data => {\n        if (this._isMounted) {\n          this.setState({\n            isLoading: false,\n            random: data\n          })\n        }\n        })\n  }\n\n  getUserList(){\n    fetch('http://localhost:3001/api/v1/users')\n      .then(res=>res.json())\n      .then(data=> {\n        this.setState({\n          userList: data\n        })\n      })\n  }\n\n  getTracks = () => {\n    fetch('http://localhost:3001/api/v1/tracks', {\n      headers: {\n        Authorization: localStorage.getItem(\"token\")\n      }\n    }).then(res => res.json())\n    .then(data => {\n      this.setState({\n        tracks: data\n      })\n    })\n  }\n\n  loginSubmitHandler = (userInfo) => {\n    fetch('http://localhost:3001/api/v1/login', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Action: \"application/json\",\n      },\n      body: JSON.stringify({\n        username: userInfo.username,\n        password: userInfo.password\n      })\n    }).then(res=>res.json())\n      .then(data => {\n        localStorage.setItem(\"token\", data.jwt)\n        this.setState({\n          user: data.user,\n          login: true\n        })\n        this.props.history.push(\"/home\")\n        this.getChristmas()\n        this.getTopHits()\n        this.getPlaylist(data.user.id)\n        this.getTracks()\n        this.getPlaylistTracks()\n      })\n  }\n\n\n    newUserSubmitHandler = (event, userInfo) => {\n      event.preventDefault()\n      let token = localStorage.getItem(\"token\")\n      fetch('http://localhost:3001/api/v1/users', {\n       method: \"POST\",\n       headers: {\n         \"Content-Type\": \"application/json\",\n         Accept: \"application/json\",\n       },\n       body: JSON.stringify({\n         name: userInfo.name,\n         username: userInfo.username,\n         password: userInfo.password,\n       })\n     }).then(res=>res.json())\n        .then(data=>{\n          localStorage.setItem(\"token\", data.jwt)\n          this.setState({\n            user: data.user,\n            login: true\n          })\n          this.props.history.push(\"/home\")\n          this.getChristmas()\n          this.getTopHits()\n          this.getPlaylist(data.user.id)\n          this.getTracks()\n          this.getPlaylistTracks()\n        })\n\n    }\n\n    logout = () => {\n      localStorage.removeItem(\"token\")\n      this.setState({\n        user: {},\n        login: false\n      })\n      this.props.history.push(\"/home\")\n    }\n\n\n\n    submitPlaylistHandler= (e, playlistId, track, spotifyId) => {\n      e.preventDefault()\n      fetch(`http://localhost:3001/api/v1/playlist_tracks`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: localStorage.getItem(\"token\")\n        },\n        body: JSON.stringify({\n          playlist_id: playlistId,\n          track_id: track.id,\n          spotify_id: spotifyId\n        })\n      }).then(res=>res.json())\n        .then(data=>{\n          let fullPlaylist = [...this.state.playlistTracks, data]\n          let newTrack = {\n            id: data.track_id,\n            name: track.name,\n            artists: track.artists,\n            image: track.image,\n            duration: track.duration,\n            popularity: track.popularity,\n            preview: track.preview,\n            spotify_id: track.spotify_id\n          }\n          this.setState({\n            playlistTracks: fullPlaylist,\n            tracks: [...this.state.tracks, newTrack]\n          })\n        }).then(alert(`${track.name} added!`))\n    }\n\n    getPlaylist = (id) => {\n      fetch(`http://localhost:3001/api/v1/users/${id}/playlists`, {\n        headers: {\n          Authorization: localStorage.getItem(\"token\")\n        }\n      })\n    .then(res=>res.json())\n    .then(data => {\n      let newPl = [...data].filter(pl => pl.user_id === id)\n      this.setState({\n        playlist: newPl\n      })\n    })\n    }\n\n    getPlaylistTracks = () => {\n      fetch(`http://localhost:3001/api/v1/playlist_tracks`, {\n        headers: {\n          Authorization: localStorage.getItem(\"token\")\n        }\n      })\n    .then(res=>res.json())\n    .then(data => {\n      this.setState({\n        playlistTracks: data\n      })\n    })\n    }\n\n\n    editSubmitHandler = (e, userInfo) => {\n      e.preventDefault()\n      let id = this.state.user.id\n      console.log(id);\n      fetch(`http://localhost:3001/api/v1/users/${id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: localStorage.getItem(\"token\")\n        },\n        body: JSON.stringify({\n          name: userInfo.name,\n          username: userInfo.username,\n          password: this.state.user.password\n        })\n      })\n    }\n\n    deleteUser = () => {\n      let id = this.state.user.id\n        fetch(`http://localhost:3001/api/v1/users/${id}`, {\n          method: \"DELETE\",\n          headers: {\n            Authorization: localStorage.getItem(\"token\")\n          }\n        }).then(this.logout())\n    }\n\n    fetchSearchedSongs = (query) => {\n      this.setState({loading: true})\n      fetch(`http://localhost:3001/api/v1/tracks/search?q=${query}`, {\n        method: \"GET\",\n        headers: {\n          Authorization: localStorage.getItem(\"token\")\n        }\n      })\n      .then(r => r.json())\n      .then(data => {\n        this.setState({\n          searchedSongs: data,\n          loading: false\n        })\n      })\n    }\n\n    createNewPlaylist = (e, playlist) => {\n      e.preventDefault()\n      //console.log(playlist)\n      fetch(`http://localhost:3001/api/v1/users/${playlist.userId}/playlists`, {\n       method: \"POST\",\n       headers: {\n         \"Content-Type\": \"application/json\",\n         Accept: \"application/json\",\n         Authorization: localStorage.getItem(\"token\")\n       },\n       body: JSON.stringify({\n         name: playlist.name,\n         user_id: playlist.userId\n       })})\n       .then(res => res.json())\n       .then(data => {\n         let playlist = [...this.state.playlist, data]\n         this.setState({\n           playlist\n         })\n       })\n       .then(alert(`${playlist.name} created!`))\n    }\n\n    // addToPlaylist = (track) => {\n    //   let newPlaylist = [...this.state.playlist, track]\n    //   this.setState({\n    //     playlist: newPlaylist\n    //   })\n    //   alert(`${track.name} added!`)\n    // }\n    //\n    // removeSong = (trackObj) => {\n    //   let newPlaylist = [...this.state.playlist].filter(track => track !== trackObj)\n    //   this.setState({playlist: newPlaylist})\n    // }\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n      <NavBar\n        login={this.state.login}\n        logout={this.logout}\n        />\n      <Switch>\n\n      <Route\n        path=\"/playlist\"\n        render={()=> (\n          <Playlist\n            userInfo={this.state.user}\n            createNewPlaylist={this.createNewPlaylist}\n            playlist={this.state.playlist}\n            removeSong={this.removeSong}\n            tracks={this.state.tracks}\n            playlistTracks={this.state.playlistTracks}\n          />\n        )} />\n\n        <Route\n          path=\"/popular\"\n          render={()=> (\n            this.state.topHits.length === 0?\n            <Loading /> :\n            <PopTrack\n              topHits={this.state.topHits}\n              addToPlaylist={this.submitPlaylistHandler}\n              playlist={this.state.playlist}\n              />\n            )}\n            />\n\n        <Route\n          path=\"/christmas\"\n          render={()=> (\n            this.state.random.length === 0?\n              <Loading /> :\n              <ChristmasTrack\n                random={this.state.random}\n                addToPlaylist={this.submitPlaylistHandler}\n                playlist={this.state.playlist}\n                />\n            )}\n            />\n\n        <Route\n          path=\"/profile\"\n          render={()=>(\n            <UserProfile\n              userInfo={this.state.user}\n              editSubmitHandler={this.editSubmitHandler}\n              deleteUser={this.deleteUser}\n             />\n          )}\n          />\n\n        <Route\n          path=\"/signup\"\n          render={()=>(\n            <NewUserForm\n              newUserSubmitHandler={this.newUserSubmitHandler}\n              />\n          )}\n        />\n\n        <Route\n          path=\"/login\"\n          render={()=> (\n            <Login\n              loginSubmitHandler={this.loginSubmitHandler}\n              userInfo={this.state.user}\n              />\n            )}\n            />\n\n        <Route\n          path=\"/home\"\n          render={()=> (\n            <Home\n              fetchSearchedSongs={this.fetchSearchedSongs}\n              searchedSongs={this.state.searchedSongs}\n              login={this.state.login}\n              loading={this.state.loading}\n              addToPlaylist={this.submitPlaylistHandler}\n              playlist={this.state.playlist}\n            />\n          )}\n          />\n\n        <Route\n          path=\"/\"\n          component={Home}\n          />\n        \n        <Route \n        path=\"/devs\" \n         component={Dev} \n        /> \n\n\n      </Switch>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n"]},"metadata":{},"sourceType":"module"}